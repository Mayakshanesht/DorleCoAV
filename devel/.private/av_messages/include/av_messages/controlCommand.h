// Generated by gencpp from file av_messages/controlCommand.msg
// DO NOT EDIT!


#ifndef AV_MESSAGES_MESSAGE_CONTROLCOMMAND_H
#define AV_MESSAGES_MESSAGE_CONTROLCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace av_messages
{
template <class ContainerAllocator>
struct controlCommand_
{
  typedef controlCommand_<ContainerAllocator> Type;

  controlCommand_()
    : header()
    , throttle(0.0)
    , brake(0.0)
    , steering(0.0)  {
    }
  controlCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , throttle(0.0)
    , brake(0.0)
    , steering(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _brake_type;
  _brake_type brake;

   typedef float _steering_type;
  _steering_type steering;





  typedef boost::shared_ptr< ::av_messages::controlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::av_messages::controlCommand_<ContainerAllocator> const> ConstPtr;

}; // struct controlCommand_

typedef ::av_messages::controlCommand_<std::allocator<void> > controlCommand;

typedef boost::shared_ptr< ::av_messages::controlCommand > controlCommandPtr;
typedef boost::shared_ptr< ::av_messages::controlCommand const> controlCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::av_messages::controlCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::av_messages::controlCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::av_messages::controlCommand_<ContainerAllocator1> & lhs, const ::av_messages::controlCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.throttle == rhs.throttle &&
    lhs.brake == rhs.brake &&
    lhs.steering == rhs.steering;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::av_messages::controlCommand_<ContainerAllocator1> & lhs, const ::av_messages::controlCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace av_messages

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::av_messages::controlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::av_messages::controlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_messages::controlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::av_messages::controlCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_messages::controlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::av_messages::controlCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::av_messages::controlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "664151a432ba94f1cd2f888544fc1623";
  }

  static const char* value(const ::av_messages::controlCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x664151a432ba94f1ULL;
  static const uint64_t static_value2 = 0xcd2f888544fc1623ULL;
};

template<class ContainerAllocator>
struct DataType< ::av_messages::controlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "av_messages/controlCommand";
  }

  static const char* value(const ::av_messages::controlCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::av_messages::controlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message for final control commands\n"
"std_msgs/Header header\n"
"\n"
"float32 throttle # 0.0 - 1.0 throttle range\n"
"float32 brake # 0.0 - 1.0 brake range\n"
"float32 steering # -angle to + angle range ## ANGLE TO BE DEFINED ACCORDING TO VEHICLE MODEL\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::av_messages::controlCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::av_messages::controlCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.throttle);
      stream.next(m.brake);
      stream.next(m.steering);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::av_messages::controlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::av_messages::controlCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AV_MESSAGES_MESSAGE_CONTROLCOMMAND_H
